generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ApiApplication {
  id     String @id @default(uuid())
  name   String
  userId String
  redirectUrl String
  clientSecret String

  user   User     @relation(fields: [userId], references: [id])
  apiKeys ApiKey[]
}

model ApiKey {
  id             String   @id @default(uuid())
  token          String   @unique
  tokenUpdatedAt DateTime
  userId         String
  applicationId  String
  validationToken String?

  user                      User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  application               ApiApplication         @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  apiKeyPermissions ApiKeyPermission[]

  @@unique([userId, applicationId])
}

model ApiKeyPermission {
  id         String     @id @default(uuid())
  permission Permission
  apiKeyId   String
  soft       Boolean

  apiKey ApiKey                 @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  grants ApiGrantedPermission[]

  @@unique([apiKeyId, permission])
}

model ApiGrantedPermission {
  apiKeyPermissionId String
  userId                     String
  createdAt                  DateTime @default(now())

  apiKeyPermission ApiKeyPermission @relation(fields: [apiKeyPermissionId], references: [id], onDelete: Cascade)
  user                     User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, apiKeyPermissionId])
}

model Asso {
  id                            String    @id @default(uuid())
  login                         String    @unique @db.VarChar(50)
  name                          String    @unique @db.VarChar(100)
  mail                          String    @unique @db.VarChar(100)
  phoneNumber                   String?   @db.VarChar(30)
  website                       String?   @db.VarChar(100)
  logo                          String?   @db.VarChar(100)
  createdAt                     DateTime  @default(now())
  updatedAt                     DateTime  @updatedAt
  deletedAt                     DateTime?
  descriptionShortTranslationId String    @unique
  descriptionTranslationId      String    @unique

  descriptionShortTranslation Translation          @relation(name: "descriptionShortTranslation", fields: [descriptionShortTranslationId], references: [id], onDelete: Cascade)
  descriptionTranslation      Translation          @relation(name: "descriptionTranslation", fields: [descriptionTranslationId], references: [id], onDelete: Cascade)
  assoMemberships             AssoMembership[]
  assoMessages                AssoMessage[]
  events                      Event[]
  assoMembershipRoles         AssoMembershipRole[]
}

model AssoMembership {
  id        String   @id @default(uuid())
  startAt   DateTime
  endAt     DateTime
  createdAt DateTime @default(now())
  userId    String
  assoId    String
  roleId    String

  user        User                       @relation(fields: [userId], references: [id])
  asso        Asso                       @relation(fields: [assoId], references: [id])
  role        AssoMembershipRole         @relation(fields: [roleId], references: [id])
  permissions AssoMembershipPermission[]
}

model AssoMembershipPermission {
  id String @id @default(uuid())

  assoMembership AssoMembership[]
}

model AssoMembershipRole {
  id          String  @id @default(uuid())
  name        String
  position    Int
  isPresident Boolean
  assoId      String

  assoMembership AssoMembership[]
  asso           Asso             @relation(fields: [assoId], references: [id])
}

model AssoMessage {
  id                 String   @id @default(uuid())
  date               DateTime
  sendToMobile       Boolean
  sendAsDaymail      Boolean
  createdAt          DateTime @default(now())
  assoId             String
  titleTranslationId String   @unique
  bodyTranslationId  String   @unique

  asso             Asso        @relation(fields: [assoId], references: [id])
  titleTranslation Translation @relation(name: "titleTranslation", fields: [titleTranslationId], references: [id], onDelete: Cascade)
  bodyTranslation  Translation @relation(name: "bodyTranslation", fields: [bodyTranslationId], references: [id], onDelete: Cascade)
}

model Event {
  id                       String   @id @default(uuid())
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  deletedAt                DateTime
  titleTranslationId       String   @unique
  descriptionTranslationId String   @unique

  titleTranslation       Translation      @relation(name: "titleTranslation", fields: [titleTranslationId], references: [id], onDelete: Cascade)
  descriptionTranslation Translation      @relation(name: "descriptionTranslation", fields: [descriptionTranslationId], references: [id], onDelete: Cascade)
  timetableEntries       TimetableEntry[]
  assos                  Asso[]
  categories             EventCategory[]
  eventAnswers           EventAnswer[]
}

model EventAnswer {
  id        String   @id @default(uuid())
  answer    String   @db.VarChar(20)
  comment   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime
  eventId   String   @default(uuid())
  userId    String   @default(uuid())

  event Event @relation(fields: [eventId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
}

model EventCategory {
  id   String @id @default(uuid())
  name String @unique @db.VarChar(100)

  events Event[]
}

model GitHubIssue {
  id            String   @id @default(uuid())
  gitHubIssueId Int
  createdAt     DateTime @default(now())
  userId        String

  user User @relation(fields: [userId], references: [id])
}

model Semester {
  code  String   @id @db.Char(3)
  start DateTime @db.Date
  end   DateTime @db.Date

  openedUes             Ue[]
  annals                UeAnnal[]
  comments              UeComment[]
  courses               UeCourse[]
  BDEContributionsStart UserBDEContribution[]    @relation("startSemester")
  BDEContributionsEnd   UserBDEContribution[]    @relation("endSemester")
  branchSubscriptions   UserBranchSubscription[]
  UeSubscriptions       UserUeSubscription[]
  etuUTTTeams           UserEtuUTTTeam[]
}

model TimetableGroup {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())

  userTimetableGroups     UserTimetableGroup[]
  timetableEntries        TimetableEntry[]
  timetableEntryOverrides TimetableEntryOverride[]
}

model TimetableEntry {
  id                 String             @id @default(uuid())
  eventStart         DateTime           @db.DateTime
  occurrencesCount   Int?               @db.UnsignedInt // The number of occurrences, if null, it will be considered infinite
  repeatEvery        Int?               @db.UnsignedInt // In milliseconds
  occurrenceDuration Int                @db.UnsignedInt // In milliseconds
  type               TimetableEntryType
  location           String
  eventId            String?
  ueCourseId         String?
  createdAt          DateTime           @default(now())

  ueCourse        UeCourse?                @relation(fields: [ueCourseId], references: [id])
  event           Event?                   @relation(fields: [eventId], references: [id])
  overwrittenBy   TimetableEntryOverride[] @relation(name: "overrideTimetableEntry")
  timetableGroups TimetableGroup[]
}

model TimetableEntryOverride {
  id                       String   @id @default(uuid())
  applyFrom                Int // The index of the first occurrence of the event to apply the override to
  applyUntil               Int // The index of the last occurrence of the event to apply the override to
  repeatEvery              Int      @default(1) @db.UnsignedInt // In number of occurrences of parent entry
  occurrenceRelativeStart  Int      @default(0) @db.UnsignedInt // How many milliseconds after the default beginning of the event should this override start at ?
  occurrenceDuration       Int?     @db.UnsignedInt
  delete                   Boolean  @default(false)
  location                 String?
  createdAt                DateTime @default(now())
  overrideTimetableEntryId String

  overrideTimetableEntry TimetableEntry   @relation(name: "overrideTimetableEntry", fields: [overrideTimetableEntryId], references: [id], onDelete: Cascade)
  timetableGroups        TimetableGroup[]
}

model Translation {
  id String  @id @default(uuid())
  fr String? @db.Text
  en String? @db.Text
  es String? @db.Text
  de String? @db.Text
  zh String? @db.Text

  assoDescriptionShort                 Asso?                        @relation("descriptionShortTranslation")
  assoDescription                      Asso?                        @relation("descriptionTranslation")
  assoMessageTitle                     AssoMessage?                 @relation("titleTranslation")
  assoMessageTitleBody                 AssoMessage?                 @relation("bodyTranslation")
  eventDescription                     Event?                       @relation("descriptionTranslation")
  eventTitle                           Event?                       @relation("titleTranslation")
  annalReportReasonDescriptions        UeAnnalReportReason?
  commentReportReasonDescriptions      UeCommentReportReason?
  starCriterionDescriptions            UeStarCriterion?
  branchDescriptions                   UTTBranch?
  branchOptionDescriptions             UTTBranchOption?
  formationDescriptions                UTTFormation?
  formationFollowingMethodDescriptions UTTFormationFollowingMethod?
  ueNames                              Ue?
  ueInfoComments                       UeInfo?                      @relation("ueInfoCommentsTranslation")
  ueInfo                               UeInfo?                      @relation("ueInfoObjectivesTranslation")
  ueInfoPrograms                       UeInfo?                      @relation("ueInfoProgramTranslation")
}

model Ue {
  id                String   @id @default(uuid())
  code              String   @unique @db.VarChar(10)
  inscriptionCode   String   @unique @db.Char(4)
  nameTranslationId String   @unique
  validationRate    Float?
  ueInfoId          String   @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  name               Translation          @relation(fields: [nameTranslationId], references: [id], onDelete: Cascade)
  usersSubscriptions UserUeSubscription[]
  credits            UeCredit[]
  starVotes          UeStarVote[]
  openSemester       Semester[]
  workTime           UeWorkTime?
  info               UeInfo               @relation(fields: [ueInfoId], references: [id], onDelete: Cascade)
  subsequentUes      UeInfo[]             @relation("ueRequirements")
  annals             UeAnnal[]
  comments           UeComment[]
  courses            UeCourse[]
  branchOption       UTTBranchOption[]
}

model UeAnnal {
  id             String    @id @default(uuid())
  // The filename is not stored in the database because it is computed from the annal id
  uploadComplete Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?
  validatedAt    DateTime?
  ueId           String
  senderId       String?
  semesterId     String
  typeId         String

  ue       Ue              @relation(fields: [ueId], references: [id], onDelete: Cascade)
  sender   User?           @relation(fields: [senderId], references: [id], onDelete: SetNull)
  type     UeAnnalType     @relation(fields: [typeId], references: [id])
  semester Semester        @relation(fields: [semesterId], references: [code])
  reports  UeAnnalReport[]
}

model UeAnnalType {
  id   String @id @default(uuid())
  name String @db.VarChar(255)

  annals UeAnnal[]
}

model UeAnnalReport {
  id        String   @id @default(uuid())
  body      String?  @db.Text
  createdAt DateTime @default(now())
  mitigated Boolean  @default(false)
  annalId   String
  userId    String?
  reasonId  String

  annal  UeAnnal             @relation(fields: [annalId], references: [id], onDelete: Cascade)
  user   User?               @relation(fields: [userId], references: [id], onDelete: SetNull)
  reason UeAnnalReportReason @relation(fields: [reasonId], references: [name])

  @@unique([userId, annalId, reasonId]) // Prevent from spams
}

model UeAnnalReportReason {
  name                     String @id @db.VarChar(100)
  descriptionTranslationId String @unique

  descriptionTranslation Translation     @relation(fields: [descriptionTranslationId], references: [id], onDelete: Cascade)
  reports                UeAnnalReport[]
}

model UeComment {
  id                String    @id @default(uuid())
  body              String    @db.Text
  isAnonymous       Boolean
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now())
  // Removed @updatedAt because the property is used to display the last datetime the content of the comment was altered on
  deletedAt         DateTime?
  validatedAt       DateTime?
  lastValidatedBody String?
  ueId              String
  authorId          String?
  semesterId        String

  ue       Ue                @relation(fields: [ueId], references: [id], onDelete: Cascade)
  author   User?             @relation(fields: [authorId], references: [id], onDelete: SetNull)
  semester Semester          @relation(fields: [semesterId], references: [code])
  answers  UeCommentReply[]
  reports  UeCommentReport[]
  upvotes  UeCommentUpvote[]
}

model UeCommentReply {
  id        String    @id @default(uuid())
  body      String    @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  // Removed @updatedAt because the property is used to display the last datetime the content of the reply was altered on
  deletedAt DateTime?
  commentId String
  authorId  String?

  comment UeComment              @relation(fields: [commentId], references: [id], onDelete: Cascade)
  author  User?                  @relation(fields: [authorId], references: [id], onDelete: SetNull)
  reports UeCommentReplyReport[]
}

model UeCommentReport {
  id        String   @id @default(uuid())
  body      String   @db.Text
  createdAt DateTime @default(now())
  mitigated Boolean  @default(false)
  commentId String
  userId    String
  reasonId  String

  comment UeComment             @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  reason  UeCommentReportReason @relation(fields: [reasonId], references: [name], onDelete: Cascade)

  @@unique([userId, commentId, reasonId]) // Prevent from spam
}

model UeCommentReplyReport {
  id        String   @id @default(uuid())
  body      String   @db.Text
  createdAt DateTime @default(now())
  mitigated Boolean  @default(false)
  replyId   String
  userId    String
  reasonId  String

  reply  UeCommentReply        @relation(fields: [replyId], references: [id], onDelete: Cascade)
  user   User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  reason UeCommentReportReason @relation(fields: [reasonId], references: [name], onDelete: Cascade)

  @@unique([userId, replyId, reasonId]) // Prevent from spam
}

model UeCommentReportReason {
  name                     String @id @db.VarChar(100)
  descriptionTranslationId String @unique

  descriptionTranslation Translation            @relation(fields: [descriptionTranslationId], references: [id], onDelete: Cascade)
  reports                UeCommentReport[]
  replyReports           UeCommentReplyReport[]
}

model UeCommentUpvote {
  id        String   @id @default(uuid())
  userId    String?
  commentId String
  createdAt DateTime @default(now())

  user    User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  comment UeComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model UeCourse {
  id         String     @id @default(uuid())
  type       CourseType
  room       String     @db.VarChar(50)
  createdAt  DateTime   @default(now())
  ueId       String
  semesterId String

  students            User[]
  ue                  Ue                 @relation(fields: [ueId], references: [id])
  semester            Semester           @relation(fields: [semesterId], references: [code])
  courseExchangesFrom UeCourseExchange[] @relation(name: "courseFrom")
  courseExchangesTo   UeCourseExchange[] @relation(name: "courseTo")
  timetableEntries    TimetableEntry[]
}

model UeCourseExchange {
  id             String    @id @default(uuid())
  stillAvailable Boolean
  body           String?   @db.Text
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?
  authorId       String
  courseFromId   String
  courseToId     String

  author     User                    @relation(fields: [authorId], references: [id])
  courseFrom UeCourse                @relation(name: "courseFrom", fields: [courseFromId], references: [id])
  courseTo   UeCourse                @relation(name: "courseTo", fields: [courseToId], references: [id])
  responses  UeCourseExchangeReply[]
}

model UeCourseExchangeReply {
  id         String    @id @default(uuid())
  body       String    @db.Text
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  authorId   String
  exchangeId String

  author   User             @relation(fields: [authorId], references: [id])
  exchange UeCourseExchange @relation(fields: [exchangeId], references: [id])
}

model UeCredit {
  id         String @id @default(uuid())
  credits    Int    @db.SmallInt
  ueId       String
  categoryId String

  ue       Ue               @relation(fields: [ueId], references: [id], onDelete: Cascade)
  category UeCreditCategory @relation(fields: [categoryId], references: [code])
}

model UeCreditCategory {
  code String @id @db.VarChar(10)
  name String @db.VarChar(255)

  credits UeCredit[]
}

model UeInfo {
  id                      String  @id @default(uuid())
  degree                  String? @db.Text
  minors                  String? @db.Text
  languages               String? @db.Text
  commentTranslationId    String? @unique
  objectivesTranslationId String? @unique
  programTranslationId    String? @unique

  ue           Ue?
  comment      Translation? @relation("ueInfoCommentsTranslation", fields: [commentTranslationId], references: [id], onDelete: Cascade)
  objectives   Translation? @relation("ueInfoObjectivesTranslation", fields: [objectivesTranslationId], references: [id], onDelete: Cascade)
  program      Translation? @relation("ueInfoProgramTranslation", fields: [programTranslationId], references: [id], onDelete: Cascade)
  requirements Ue[]         @relation(name: "ueRequirements")
}

model UeStarCriterion {
  id                       String @id @default(uuid())
  name                     String @db.VarChar(255) @unique
  descriptionTranslationId String @unique

  descriptionTranslation Translation  @relation(fields: [descriptionTranslationId], references: [id], onDelete: Cascade)
  starVotes              UeStarVote[]
}

model UeStarVote {
  id          String   @id @default(uuid())
  value       Int      @db.SmallInt
  createdAt   DateTime @default(now())
  ueId        String
  criterionId String
  userId      String?

  ue        Ue              @relation(fields: [ueId], references: [id], onDelete: Cascade)
  criterion UeStarCriterion @relation(fields: [criterionId], references: [id], onDelete: Cascade)
  user      User?           @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@unique([ueId, userId, criterionId])
}

model UeWorkTime {
  id         String @id @default(uuid())
  cm         Int?
  td         Int?
  tp         Int?
  the        Int?
  project    Int?
  internship Int?
  ueId       String @unique

  ue Ue @relation(fields: [ueId], references: [id], onDelete: Cascade)
}

model User {
  id              String  @id @default(uuid())
  login           String  @unique @db.VarChar(50)
  hash            String?
  // TODO : maybe a field accountType (that is either CAS or login-password), but this may be implemented in the centralized authentication
  studentId       Int?
  firstName       String
  lastName        String
  rgpdId          String  @unique
  preferenceId    String  @unique
  infosId         String  @unique
  mailsPhonesId   String  @unique
  socialNetworkId String  @unique
  privacyId       String  @unique

  userType              UserType
  timestamps            UserTimestamps?
  socialNetwork         UserSocialNetwork        @relation(fields: [socialNetworkId], references: [id])
  bans                  UserBan[]
  rgpd                  UserRGPD                 @relation(fields: [rgpdId], references: [id])
  bdeContributions      UserBDEContribution[]
  assoMembership        AssoMembership[]
  branchSubscriptions   UserBranchSubscription[]
  formation             UserFormation?
  preference            UserPreference           @relation(fields: [preferenceId], references: [id])
  infos                 UserInfos                @relation(fields: [infosId], references: [id])
  addresses             UserAddress[]
  mailsPhones           UserMailsPhones          @relation(fields: [mailsPhonesId], references: [id])
  otherAttributes       UserOtherAttributValue[]
  UesSubscriptions      UserUeSubscription[]
  UeStarVotes           UeStarVote[]
  courses               UeCourse[]
  eventAnswers          EventAnswer[]
  annalsSent            UeAnnal[]
  annalsReported        UeAnnalReport[]
  comments              UeComment[]
  commentReplies        UeCommentReply[]
  commentsReported      UeCommentReport[]
  repliesReported       UeCommentReplyReport[]
  gitHubIssues          GitHubIssue[]
  etuUTTTeam            UserEtuUTTTeam[]
  courseExchanges       UeCourseExchange[]
  courseExchangeReplies UeCourseExchangeReply[]
  commentUpvotes        UeCommentUpvote[]
  timetableGroups       UserTimetableGroup[]
  homepageWidgets       UserHomepageWidget[]
  privacy               UserPrivacy              @relation(fields: [privacyId], references: [id])
  apiApplications       ApiApplication[]
  apiKeys               ApiKey[]
  apiGrants             ApiGrantedPermission[]
}

model UserAddress {
  id         String  @id @default(uuid())
  street     String? @db.VarChar(255)
  postalCode String? @db.VarChar(20)
  city       String? @db.VarChar(255)
  country    String? @db.VarChar(50)
  userId     String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserBan {
  id                 String    @id @default(uuid())
  readOnlyExpiration DateTime? @db.Date
  bannedExpiration   DateTime? @db.Date
  userId             String

  user User @relation(fields: [userId], references: [id])
}

model UserBDEContribution {
  id              String   @id @default(uuid())
  start           DateTime @db.Date
  end             DateTime @db.Date
  userId          String
  startSemesterId String
  endSemesterId   String

  user          User     @relation(fields: [userId], references: [id])
  startSemester Semester @relation("startSemester", fields: [startSemesterId], references: [code])
  endSemester   Semester @relation("endSemester", fields: [endSemesterId], references: [code])
}

model UserBranchSubscription {
  id             String   @id @default(uuid())
  userId         String
  semesterNumber Int      @db.SmallInt
  createdAt      DateTime @default(now())
  branchOptionId String
  semesterCode   String

  user         User            @relation(fields: [userId], references: [id])
  branchOption UTTBranchOption @relation(fields: [branchOptionId], references: [id])
  semester     Semester        @relation(fields: [semesterCode], references: [code])
}

model UserEtuUTTTeam {
  id     String @id @default(uuid())
  role   String @db.Text
  userId String

  user     User       @relation(fields: [userId], references: [id])
  semester Semester[]
}

model UserFormation {
  id                String   @id @default(uuid())
  createdAt         DateTime @default(now())
  userId            String   @unique
  formationId       String
  followingMethodId String

  user            User                        @relation(fields: [userId], references: [id])
  formation       UTTFormation                @relation(fields: [formationId], references: [name])
  followingMethod UTTFormationFollowingMethod @relation(fields: [followingMethodId], references: [name])
}

model UserInfos {
  id          String    @id @default(uuid())
  sex         Sex?
  nationality String?   @db.VarChar(50)
  birthday    DateTime? @db.Date
  avatar      String    @default("default.png") @db.VarChar(255)
  nickname    String?   @db.VarChar(50)
  passions    String?   @db.Text
  website     String?   @db.VarChar(255)

  user User?
}

model UserMailsPhones {
  id           String  @id @default(uuid())
  mailUTT      String? @db.VarChar(255)
  mailPersonal String? @db.VarChar(255)
  phoneNumber  String? @db.VarChar(100)

  user User?
}

model UserPrivacy {
  // For each field, if it is true, it's public. If it is false, it's private.
  id                     String         @id @default(uuid())
  mailUTT                Boolean        @default(false)
  mailPersonal           Boolean        @default(false)
  phoneNumber            Boolean        @default(false)
  birthday               Boolean        @default(false)
  birthdayDisplayOnlyAge Boolean        @default(false)
  sex                    Boolean        @default(false)
  nationality            Boolean        @default(false)
  discord                Boolean        @default(false)
  address                AddressPrivacy @default(ALL_PRIVATE)
  timetable              Boolean        @default(false)

  user User?
}

model UserOtherAttribut {
  name String        @id @db.VarChar(100)
  type AttributeType

  values UserOtherAttributValue[]
}

model UserOtherAttributValue {
  id         String @id @default(uuid())
  value      String @db.Text
  userId     String
  attributId String

  user     User              @relation(fields: [userId], references: [id])
  attribut UserOtherAttribut @relation(fields: [attributId], references: [name])
}

model UserHomepageWidget {
  id     String @id @default(uuid())
  widget String @db.VarChar(20)
  x      Int
  y      Int
  width  Int
  height Int
  userId String

  user User @relation(fields: [userId], references: [id])
}

model UserPreference {
  id             String   @id @default(uuid())
  language       Language @default(fr)
  wantDaymail    Boolean  @default(false)
  wantDayNotif   Boolean  @default(false)
  wantDiscordUtt Boolean  @default(false)

  user User?
}

model UserRGPD {
  id                   String   @id @default(uuid())
  isKeepingAccount     Boolean?
  isDeletingEverything Boolean?

  user User?
}

model UserSocialNetwork {
  id        String  @id @default(uuid())
  facebook  String? @db.VarChar(255)
  twitter   String? @db.VarChar(255)
  instagram String? @db.VarChar(255)
  linkedin  String? @db.VarChar(255)
  twitch    String? @db.VarChar(255)
  spotify   String? @db.VarChar(255)
  discord   String? @db.VarChar(255)

  user User?
}

model UserTimestamps {
  id            String    @id @default(uuid())
  lastLoginDate DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  userId        String    @unique

  user User @relation(fields: [userId], references: [id])
}

model UserTimetableGroup {
  id               String @id @default(uuid())
  timetableGroupId String
  userId           String
  priority         Int

  user           User           @relation(fields: [userId], references: [id])
  timetableGroup TimetableGroup @relation(fields: [timetableGroupId], references: [id])

  @@unique([timetableGroupId, userId])
}

model UserUeSubscription {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  userId     String
  ueId       String
  semesterId String

  user     User     @relation(fields: [userId], references: [id])
  ue       Ue       @relation(fields: [ueId], references: [id])
  semester Semester @relation(fields: [semesterId], references: [code])

  @@unique([userId, ueId, semesterId])
}

model UTTBranch {
  code                     String @id @db.VarChar(10)
  name                     String @db.VarChar(255)
  exitSalary               Int?
  employmentRate           Float?
  CDIRate                  Float?
  abroadEmploymentRate     Float?
  descriptionTranslationId String @unique

  descriptionTranslation Translation       @relation(fields: [descriptionTranslationId], references: [id], onDelete: Cascade)
  branchOptions          UTTBranchOption[]
}

model UTTBranchOption {
  id                       String @id @default(uuid())
  code                     String @db.VarChar(10)
  name                     String @db.VarChar(255)
  branchCode               String
  descriptionTranslationId String @unique

  branch                 UTTBranch                @relation(fields: [branchCode], references: [code])
  descriptionTranslation Translation              @relation(fields: [descriptionTranslationId], references: [id], onDelete: Cascade)
  ues                    Ue[]
  branchSubscriptions    UserBranchSubscription[]

  @@unique([code, branchCode])
}

model UTTFormation {
  name                     String @id @db.VarChar(100)
  descriptionTranslationId String @unique

  descriptionTranslation Translation     @relation(fields: [descriptionTranslationId], references: [id], onDelete: Cascade)
  userFormations         UserFormation[]
}

model UTTFormationFollowingMethod {
  name                     String @id @db.VarChar(100)
  descriptionTranslationId String @unique

  descriptionTranslation Translation     @relation(fields: [descriptionTranslationId], references: [id], onDelete: Cascade)
  userFormations         UserFormation[]
}

enum UserType {
  STUDENT
  FORMER_STUDENT
  TEACHER
  EMPLOYEE
  OTHER
}

enum AttributeType {
  BOOL
  INT
  FLOAT
  STRING
  LONGTEXT
  DATE
  DATETIME
}

enum CourseType {
  CM
  TD
  TP
}

enum Language {
  fr
  en
  es
  de
  zh
}

enum Sex {
  MALE
  FEMALE
  OTHER
}

enum Week {
  A
  B
}

enum TimetableEntryType {
  COURSE
  ASSO
  DELETE
  CUSTOM
}

enum AddressPrivacy {
  ALL_PRIVATE
  CITY_PRIVATE
  ADDRESS_PRIVATE
  ALL_PUBLIC
}

enum Permission {
  API_SEE_OPINIONS_UE
  API_UPLOAD_ANNAL
  API_MODERATE_ANNAL
  API_MODERATE_COMMENTS

  USER_SEE_DETAILS
  USER_UPDATE_DETAILS
}
