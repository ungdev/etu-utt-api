generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Asso {
  id                            String   @id @default(uuid())
  login                         String   @unique @db.VarChar(50)
  name                          String   @unique @db.VarChar(100)
  mail                          String   @unique @db.VarChar(100)
  phoneNumber                   String?  @db.VarChar(30)
  website                       String?  @db.VarChar(100)
  logo                          String?  @db.VarChar(100)
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt
  deletedAt                     DateTime
  descriptionShortTranslationId String   @unique
  descriptionTranslationId      String   @unique

  descriptionShortTranslation Translation      @relation(name: "descriptionShortTranslation", fields: [descriptionShortTranslationId], references: [id], onDelete: Cascade)
  descriptionTranslation      Translation      @relation(name: "descriptionTranslation", fields: [descriptionTranslationId], references: [id], onDelete: Cascade)
  keywords                    AssoKeyword[]
  assoMessages                AssoMessage[]
  events                      Event[]
  assoMemberships             AssoMembership[]
  eventPrivacy                EventPrivacy[]
}

model AssoKeyword {
  name String @id @db.VarChar(30)

  assos Asso[]
}

model AssoMembership {
  id        String   @id @default(uuid())
  startAt   DateTime
  endAt     DateTime
  createdAt DateTime @default(now())
  userId    String
  assoId    String

  user        User                       @relation(fields: [userId], references: [id])
  asso        Asso                       @relation(fields: [assoId], references: [id])
  roles       AssoMembershipRole[]
  permissions AssoMembershipPermission[]
}

model AssoMembershipPermission {
  id String @id @default(uuid())

  assoMembership AssoMembership[]
}

model AssoMembershipRole {
  id String @id @default(uuid())

  assoMembership AssoMembership[]
  eventPrivacys  EventPrivacy[]
}

model AssoMessage {
  id                 String   @id @default(uuid())
  date               DateTime
  sendToMobile       Boolean
  sendAsDaymail      Boolean
  createdAt          DateTime @default(now())
  assoId             String
  titleTranslationId String   @unique
  bodyTranslationId  String   @unique

  asso             Asso        @relation(fields: [assoId], references: [id])
  titleTranslation Translation @relation(name: "titleTranslation", fields: [titleTranslationId], references: [id], onDelete: Cascade)
  bodyTranslation  Translation @relation(name: "bodyTranslation", fields: [bodyTranslationId], references: [id], onDelete: Cascade)
}

model Event {
  id                       String   @id @default(uuid())
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  deletedAt                DateTime
  titleTranslationId       String   @unique
  descriptionTranslationId String   @unique

  titleTranslation       Translation      @relation(name: "titleTranslation", fields: [titleTranslationId], references: [id], onDelete: Cascade)
  descriptionTranslation Translation      @relation(name: "descriptionTranslation", fields: [descriptionTranslationId], references: [id], onDelete: Cascade)
  timetableEntries       TimetableEntry[]
  assos                  Asso[]
  categories             EventCategory[]
  eventAnswers           EventAnswer[]
  eventPrivacy           EventPrivacy[]
}

model EventAnswer {
  id        String   @id @default(uuid())
  answer    String   @db.VarChar(20)
  comment   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime
  eventId   String   @default(uuid())
  userId    String   @default(uuid())

  event Event @relation(fields: [eventId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
}

model EventCategory {
  id   String @id @default(uuid())
  name String @unique @db.VarChar(100)

  events Event[]
}

model EventPrivacy {
  id      String @id @default(uuid())
  eventId String @unique

  event        Event                @relation(fields: [eventId], references: [id])
  allowedAssos Asso[]
  allowedRoles AssoMembershipRole[]
}

model GitHubIssue {
  id            String   @id @default(uuid())
  gitHubIssueId Int
  createdAt     DateTime @default(now())
  userId        String

  user User @relation(fields: [userId], references: [id])
}

model Semester {
  code  String   @id @db.Char(3)
  start DateTime @db.Date
  end   DateTime @db.Date

  openedUEs             UE[]
  annals                UEAnnal[]
  comments              UEComment[]
  courses               UECourse[]
  BDEContributionsStart UserBDEContribution[] @relation("startSemester")
  BDEContributionsEnd   UserBDEContribution[] @relation("endSemester")
  branches              UserBranch[]
  UESubscriptions       UserUESubscription[]
  etuUTTTeams           UserEtuUTTTeam[]
}

model TimetableGroup {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())

  userTimetableGroups     UserTimetableGroup[]
  timetableEntries        TimetableEntry[]
  timetableEntryOverrides TimetableEntryOverride[]
}

model TimetableEntry {
  id                 String             @id @default(uuid())
  eventStart         DateTime           @db.DateTime
  occurrencesCount   Int?               @db.UnsignedInt // The number of occurrences, if null, it will be considered infinite
  repeatEvery        Int?               @db.UnsignedInt // In milliseconds
  occurrenceDuration Int                @db.UnsignedInt // In milliseconds
  type               TimetableEntryType
  location           String
  eventId            String?
  ueCourseId         String?
  createdAt          DateTime           @default(now())

  ueCourse        UECourse?                @relation(fields: [ueCourseId], references: [id])
  event           Event?                   @relation(fields: [eventId], references: [id])
  overwrittenBy   TimetableEntryOverride[] @relation(name: "overrideTimetableEntry")
  timetableGroups TimetableGroup[]
}

model TimetableEntryOverride {
  id                       String   @id @default(uuid())
  applyFrom                Int // The index of the first occurrence of the event to apply the override to
  applyUntil               Int // The index of the last occurrence of the event to apply the override to
  repeatEvery              Int      @default(1) @db.UnsignedInt // In number of occurrences of parent entry
  occurrenceRelativeStart  Int      @default(0) @db.UnsignedInt // How many milliseconds after the default beginning of the event should this override start at ?
  occurrenceDuration       Int?     @db.UnsignedInt
  delete                   Boolean  @default(false)
  location                 String?
  createdAt                DateTime @default(now())
  overrideTimetableEntryId String

  overrideTimetableEntry TimetableEntry   @relation(name: "overrideTimetableEntry", fields: [overrideTimetableEntryId], references: [id], onDelete: Cascade)
  timetableGroups        TimetableGroup[]
}

model Translation {
  id String  @id @default(uuid())
  fr String? @db.Text
  en String? @db.Text
  es String? @db.Text
  de String? @db.Text
  zh String? @db.Text

  assoDescriptionShort                 Asso?                        @relation("descriptionShortTranslation")
  assoDescription                      Asso?                        @relation("descriptionTranslation")
  assoMessageTitle                     AssoMessage?                 @relation("titleTranslation")
  assoMessageTitleBody                 AssoMessage?                 @relation("bodyTranslation")
  eventDescription                     Event?                       @relation("descriptionTranslation")
  eventTitle                           Event?                       @relation("titleTranslation")
  userPermissionName                   UserPermission[]             @relation("userPermissionName")
  userPermissionDescription            UserPermission[]             @relation("userPermissionDescription")
  annalReportReasonDescriptions        UEAnnalReportReason?
  commentReportReasonDescriptions      UECommentReportReason?
  starCriterionDescriptions            UEStarCriterion?
  branchDescriptions                   UTTBranch?
  branchOptionDescriptions             UTTBranchOption?
  formationDescriptions                UTTFormation?
  formationFollowingMethodDescriptions UTTFormationFollowingMethod?
}

model UE {
  id              String   @id @default(uuid())
  code            String   @unique @db.VarChar(10)
  inscriptionCode String   @unique @db.Char(4)
  name            String   @db.VarChar(255)
  validationRate  Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  usersSubscriptions UserUESubscription[]
  credits            UECredit[]
  starVotes          UEStarVote[]
  openSemester       Semester[]
  workTime           UEWorkTime?
  info               UEInfo?
  subsequentUEs      UEInfo[]             @relation("ueRequirements")
  annals             UEAnnal[]
  comments           UEComment[]
  courses            UECourse[]
  branchOption       UTTBranchOption[]
}

model UEAnnal {
  id            String    @id @default(uuid())
  filename      String    @db.VarChar(255)
  validatedById String
  createdAt     DateTime  @default(now())
  deletedAt     DateTime?
  ueId          String
  senderId      String?
  semesterId    String
  typeId        String

  ue       UE              @relation(fields: [ueId], references: [id], onDelete: Cascade)
  sender   User?           @relation(fields: [senderId], references: [id], onDelete: SetNull)
  semester Semester        @relation(fields: [semesterId], references: [code])
  reports  UEAnnalReport[]
}

model UEAnnalReport {
  id        String   @id @default(uuid())
  body      String?  @db.Text
  createdAt DateTime @default(now())
  annalId   String
  userId    String?
  reasonId  String

  annal  UEAnnal             @relation(fields: [annalId], references: [id], onDelete: Cascade)
  user   User?               @relation(fields: [userId], references: [id], onDelete: SetNull)
  reason UEAnnalReportReason @relation(fields: [reasonId], references: [name])

  @@unique([userId, annalId, reasonId]) // Prevent from spams
}

model UEAnnalReportReason {
  name                     String @id @db.VarChar(100)
  descriptionTranslationId String @unique

  descriptionTranslation Translation     @relation(fields: [descriptionTranslationId], references: [id], onDelete: Cascade)
  reports                UEAnnalReport[]
}

model UEComment {
  id          String    @id @default(uuid())
  body        String    @db.Text
  isAnonymous Boolean
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  ueId        String
  authorId    String?
  semesterId  String

  ue       UE                @relation(fields: [ueId], references: [id], onDelete: Cascade)
  author   User?             @relation(fields: [authorId], references: [id], onDelete: SetNull)
  semester Semester          @relation(fields: [semesterId], references: [code])
  answers  UECommentReply[]
  reports  UECommentReport[]
  upvotes  UECommentUpvote[]

  @@unique([ueId, authorId])
}

model UECommentReply {
  id        String    @id @default(uuid())
  body      String    @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  commentId String
  authorId  String?

  comment UEComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  author  User?     @relation(fields: [authorId], references: [id], onDelete: SetNull)
}

model UECommentReport {
  id        String   @id @default(uuid())
  body      String   @db.Text
  createdAt DateTime @default(now())
  commentId String
  userId    String?
  reasonId  String

  comment UEComment             @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User?                 @relation(fields: [userId], references: [id], onDelete: SetNull)
  reason  UECommentReportReason @relation(fields: [reasonId], references: [name], onDelete: Cascade)

  @@unique([userId, commentId, reasonId]) // Prevent from spam
}

model UECommentReportReason {
  name                     String @id @db.VarChar(100)
  descriptionTranslationId String @unique

  descriptionTranslation Translation       @relation(fields: [descriptionTranslationId], references: [id], onDelete: Cascade)
  reports                UECommentReport[]
}

model UECommentUpvote {
  id        String   @id @default(uuid())
  userId    String?
  commentId String
  createdAt DateTime @default(now())

  user    User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  comment UEComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model UECourse {
  id         String     @id @default(uuid())
  type       CourseType
  room       String     @db.VarChar(50)
  createdAt  DateTime   @default(now())
  ueId       String
  semesterId String

  students            User[]
  ue                  UE                 @relation(fields: [ueId], references: [id])
  semester            Semester           @relation(fields: [semesterId], references: [code])
  courseExchangesFrom UECourseExchange[] @relation(name: "courseFrom")
  courseExchangesTo   UECourseExchange[] @relation(name: "courseTo")
  timetableEntries    TimetableEntry[]
}

model UECourseExchange {
  id             String    @id @default(uuid())
  stillAvailable Boolean
  body           String?   @db.Text
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?
  authorId       String
  courseFromId   String
  courseToId     String

  author     User                    @relation(fields: [authorId], references: [id])
  courseFrom UECourse                @relation(name: "courseFrom", fields: [courseFromId], references: [id])
  courseTo   UECourse                @relation(name: "courseTo", fields: [courseToId], references: [id])
  responses  UECourseExchangeReply[]
}

model UECourseExchangeReply {
  id         String    @id @default(uuid())
  body       String    @db.Text
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  authorId   String
  exchangeId String

  author   User             @relation(fields: [authorId], references: [id])
  exchange UECourseExchange @relation(fields: [exchangeId], references: [id])
}

model UECredit {
  id         String @id @default(uuid())
  credits    Int    @db.SmallInt
  ueId       String
  categoryId String

  ue       UE               @relation(fields: [ueId], references: [id], onDelete: Cascade)
  category UECreditCategory @relation(fields: [categoryId], references: [code])
}

model UECreditCategory {
  code String @id @db.VarChar(10)
  name String @db.VarChar(255)

  credits UECredit[]
}

model UEInfo {
  id         String  @id @default(uuid())
  degree     String? @db.Text
  minors     String? @db.Text
  languages  String? @db.Text
  comment    String? @db.Text
  objectives String? @db.Text
  program    String? @db.Text
  ueId       String  @unique

  ue           UE   @relation(fields: [ueId], references: [id], onDelete: Cascade)
  requirements UE[] @relation(name: "ueRequirements")
}

model UEStarCriterion {
  id                       String @id @default(uuid())
  name                     String @db.VarChar(255)
  descriptionTranslationId String @unique

  descriptionTranslation Translation  @relation(fields: [descriptionTranslationId], references: [id], onDelete: Cascade)
  starVotes              UEStarVote[]
}

model UEStarVote {
  id          String   @id @default(uuid())
  value       Int      @db.SmallInt
  createdAt   DateTime @default(now())
  ueId        String
  criterionId String
  userId      String?

  ue        UE              @relation(fields: [ueId], references: [id], onDelete: Cascade)
  criterion UEStarCriterion @relation(fields: [criterionId], references: [id], onDelete: Cascade)
  user      User?           @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@unique([ueId, userId, criterionId])
}

model UEWorkTime {
  id         String @id @default(uuid())
  cm         Int?
  td         Int?
  tp         Int?
  the        Int?
  project    Int?
  internship Int?
  ueId       String @unique

  ue UE @relation(fields: [ueId], references: [id], onDelete: Cascade)
}

model UserPermission {
  id                       String  @id
  nameTranslationId        String
  descriptionTranslationId String?

  name        Translation                 @relation(name: "userPermissionName", fields: [nameTranslationId], references: [id], onDelete: Cascade)
  description Translation?                @relation(name: "userPermissionDescription", fields: [descriptionTranslationId], references: [id], onDelete: SetNull)
  users       UserPermissionAssignement[]
}

model UserPermissionAssignement {
  id               String   @id @default(uuid())
  userPermissionId String
  userId           String
  assignedAt       DateTime @default(now())
  assignedById     String?

  userPermission UserPermission @relation(fields: [userPermissionId], references: [id], onDelete: Cascade)
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedBy     User?          @relation(fields: [assignedById], references: [id], name: "permissions_assigned", onDelete: SetNull)
}

model User {
  id        String  @id @default(uuid())
  login     String  @unique @db.VarChar(50)
  hash      String?
  // TODO : maybe a field accountType (that is either CAS or login-password), but this may be implemented in the centralized authentication
  studentId Int?
  firstName String
  lastName  String
  rgpdId    String? @unique

  role                  UserRole
  timestamps            UserTimestamps?
  socialNetwork         UserSocialNetwork?
  bans                  UserBan[]
  rgpd                  UserRGPD?
  BDEContributions      UserBDEContribution[]
  assoMembership        AssoMembership[]
  branch                UserBranch?
  formation             UserFormation?
  preference            UserPreference?
  infos                 UserInfos?
  addresses             UserAddress[]
  mailsPhones           UserMailsPhones?
  otherAttributes       UserOtherAttributValue[]
  UEsSubscriptions      UserUESubscription[]
  UEStarVotes           UEStarVote[]
  courses               UECourse[]
  eventAnswers          EventAnswer[]
  annalsSent            UEAnnal[]
  annalsReported        UEAnnalReport[]
  comments              UEComment[]
  commentReplies        UECommentReply[]
  commentsReported      UECommentReport[]
  gitHubIssues          GitHubIssue[]
  etuUTTTeam            UserEtuUTTTeam[]
  // Permissions assigned to the user
  permissions           UserPermissionAssignement[]
  // Permission assigned by the user to other users. Used for access control history
  permissionsAssigned   UserPermissionAssignement[] @relation(name: "permissions_assigned")
  courseExchanges       UECourseExchange[]
  courseExchangeReplies UECourseExchangeReply[]
  commentUpvotes        UECommentUpvote[]
  userTimetableGroup    UserTimetableGroup[]
}

model UserAddress {
  id         String  @id @default(uuid())
  street     String? @db.VarChar(255)
  postalCode String? @db.VarChar(20)
  city       String? @db.VarChar(255)
  country    String? @db.VarChar(50)
  userId     String

  user User @relation(fields: [userId], references: [id])
}

model UserBan {
  id                 String    @id @default(uuid())
  readOnlyExpiration DateTime? @db.Date
  bannedExpiration   DateTime? @db.Date
  userId             String

  user User @relation(fields: [userId], references: [id])
}

model UserBDEContribution {
  id              String   @id @default(uuid())
  start           DateTime @db.Date
  end             DateTime @db.Date
  userId          String
  startSemesterId String
  endSemesterId   String

  user          User     @relation(fields: [userId], references: [id])
  startSemester Semester @relation("startSemester", fields: [startSemesterId], references: [code])
  endSemester   Semester @relation("endSemester", fields: [endSemesterId], references: [code])
}

model UserBranch {
  id             String   @id @default(uuid())
  semesterNumber Int      @db.SmallInt
  createdAt      DateTime @default(now())
  userId         String   @unique
  branchId       String
  branchOptionId String
  semesterId     String

  user         User            @relation(fields: [userId], references: [id])
  branch       UTTBranch       @relation(fields: [branchId], references: [code])
  branchOption UTTBranchOption @relation(fields: [branchOptionId], references: [code])
  semester     Semester        @relation(fields: [semesterId], references: [code])
}

model UserEtuUTTTeam {
  id     String @id @default(uuid())
  role   String @db.Text
  userId String

  user     User       @relation(fields: [userId], references: [id])
  semester Semester[]
}

model UserFormation {
  id                String   @id @default(uuid())
  createdAt         DateTime @default(now())
  userId            String   @unique
  formationId       String
  followingMethodId String

  user            User                        @relation(fields: [userId], references: [id])
  formation       UTTFormation                @relation(fields: [formationId], references: [name])
  followingMethod UTTFormationFollowingMethod @relation(fields: [followingMethodId], references: [name])
}

model UserInfos {
  id          String    @id @default(uuid())
  sex         Sex?
  nationality String?   @db.VarChar(50)
  birthday    DateTime? @db.Date
  avatar      String    @default("default.png") @db.VarChar(255)
  nickname    String?   @db.VarChar(50)
  passions    String?   @db.Text
  website     String?   @db.VarChar(255)
  userId      String    @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserMailsPhones {
  id           String  @id @default(uuid())
  mailUTT      String? @db.VarChar(255)
  mailPersonal String? @db.VarChar(255)
  phoneNumber  String? @db.VarChar(100)
  userId       String  @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserOtherAttribut {
  name String        @id @db.VarChar(100)
  type AttributeType

  values UserOtherAttributValue[]
}

model UserOtherAttributValue {
  id         String @id @default(uuid())
  value      String @db.Text
  userId     String
  attributId String

  user     User              @relation(fields: [userId], references: [id])
  attribut UserOtherAttribut @relation(fields: [attributId], references: [name])
}

model UserPreference {
  id                     String   @id @default(uuid())
  birthdayDisplayOnlyAge Boolean
  language               Language
  wantDaymail            Boolean
  wantDayNotif           Boolean
  userId                 String   @unique

  user User @relation(fields: [userId], references: [id])
}

model UserRGPD {
  id                   String   @id @default(uuid())
  isKeepingAccount     Boolean?
  isDeletingEverything Boolean?
  userId               String   @unique

  user User @relation(fields: [userId], references: [id])
}

model UserSocialNetwork {
  id             String  @id @default(uuid())
  facebook       String? @db.VarChar(255)
  twitter        String? @db.VarChar(255)
  instagram      String? @db.VarChar(255)
  linkedin       String? @db.VarChar(255)
  pseudoDiscord  String? @db.VarChar(255)
  wantDiscordUTT Boolean
  userId         String  @unique

  user User @relation(fields: [userId], references: [id])
}

model UserTimestamps {
  id             String    @id @default(uuid())
  firstLoginDate DateTime?
  lastLoginDate  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?
  userId         String    @unique

  user User @relation(fields: [userId], references: [id])
}

model UserTimetableGroup {
  id               String @id @default(uuid())
  timetableGroupId String
  userId           String
  priority         Int

  user           User           @relation(fields: [userId], references: [id])
  timetableGroup TimetableGroup @relation(fields: [timetableGroupId], references: [id])

  @@unique([timetableGroupId, userId])
}

model UserUESubscription {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  userId     String
  ueId       String
  semesterId String

  user     User     @relation(fields: [userId], references: [id])
  ue       UE       @relation(fields: [ueId], references: [id])
  semester Semester @relation(fields: [semesterId], references: [code])

  @@unique([userId, ueId, semesterId])
}

model UTTBranch {
  code                     String @id @db.VarChar(10)
  name                     String @db.VarChar(255)
  exitSalary               Int?
  employmentRate           Float?
  CDIRate                  Float?
  abroadEmploymentRate     Float?
  descriptionTranslationId String @unique

  descriptionTranslation Translation       @relation(fields: [descriptionTranslationId], references: [id], onDelete: Cascade)
  branchOptions          UTTBranchOption[]
  userBranches           UserBranch[]
}

model UTTBranchOption {
  code                     String @id @db.VarChar(10)
  name                     String @db.VarChar(255)
  branchId                 String
  descriptionTranslationId String @unique

  branch                 UTTBranch    @relation(fields: [branchId], references: [code])
  descriptionTranslation Translation  @relation(fields: [descriptionTranslationId], references: [id], onDelete: Cascade)
  ues                    UE[]
  userBranches           UserBranch[]
}

model UTTFormation {
  name                     String @id @db.VarChar(100)
  descriptionTranslationId String @unique

  descriptionTranslation Translation     @relation(fields: [descriptionTranslationId], references: [id], onDelete: Cascade)
  userFormations         UserFormation[]
}

model UTTFormationFollowingMethod {
  name                     String @id @db.VarChar(100)
  descriptionTranslationId String @unique

  descriptionTranslation Translation     @relation(fields: [descriptionTranslationId], references: [id], onDelete: Cascade)
  userFormations         UserFormation[]
}

enum UserRole {
  STUDENT
  TEACHER
  EMPLOYEE
}

enum AttributeType {
  BOOL
  INT
  FLOAT
  STRING
  LONGTEXT
  DATE
  DATETIME
}

enum CourseType {
  CM
  TD
  TP
}

enum Language {
  FR
  EN
  ES
  DE
  ZH
}

enum Sex {
  MALE
  FEMALE
  OTHER
}

enum Week {
  A
  B
}

enum TimetableEntryType {
  COURSE
  ASSO
  DELETE
  CUSTOM
}
